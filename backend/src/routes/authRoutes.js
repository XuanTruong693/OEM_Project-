const express = require("express");
const { OAuth2Client } = require("google-auth-library");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const dotenv = require("dotenv");
const User = require("../models/User");
const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);
dotenv.config();
const router = express.Router();

// üîê H√†m t·∫°o token
const generateToken = (user) => {
  return jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET, {
    expiresIn: "1h",
  });
};
// üåê ƒêƒÉng nh·∫≠p v·ªõi Google
router.post("/google", async (req, res) => {
  try {
    const { idToken, role } = req.body;

    if (!idToken || !role) {
      return res.status(400).json({
        message: "Thi·∫øu th√¥ng tin (idToken ho·∫∑c role)",
        status: "error",
      });
    }
    console.log("üîç CLIENT_ID BE:", process.env.GOOGLE_CLIENT_ID);
    console.log("üîç ID Token (audience):", jwt.decode(idToken)?.aud);

    // ‚úÖ X√°c th·ª±c token v·ªõi Google
    const ticket = await client.verifyIdToken({
      idToken,
      audience: process.env.GOOGLE_CLIENT_ID,
    });
    const payload = ticket.getPayload();

    const email = payload.email?.toLowerCase().trim();
    const full_name = payload.name;

    // ‚úÖ Ki·ªÉm tra role h·ª£p l·ªá
    const validRoles = ["student", "instructor"];
    if (!validRoles.includes(role)) {
      return res.status(400).json({
        message: "Vai tr√≤ kh√¥ng h·ª£p l·ªá (ph·∫£i ch·ªçn student ho·∫∑c instructor)",
        status: "error",
      });
    }

    // ‚úÖ Ki·ªÉm tra xem user ƒë√£ t·ªìn t·∫°i ch∆∞a
    let user = await User.findOne({ where: { email } });

    if (!user) {
      // ‚úÖ N·∫øu ch∆∞a, t·∫°o m·ªõi user
      user = await User.create({
        full_name,
        email,
        password_hash: await bcrypt.hash(Date.now().toString(), 10), // t·∫°m th·ªùi sinh m·∫≠t kh·∫©u ng·∫´u nhi√™n
        role,
        created_at: new Date(),
      });
    }

    // ‚úÖ Sinh token JWT
    const token = jwt.sign(
      { id: user.id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    res.json({
      message: "ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng",
      status: "success",
      token,
      user: {
        id: user.id,
        full_name: user.full_name,
        role: user.role,
      },
    });
  } catch (err) {
    console.error("‚ùå L·ªói Google Login:", err);
    res.status(500).json({
      message: "L·ªói x√°c th·ª±c Google ho·∫∑c server",
      status: "error",
    });
  }
});

// üìù ƒêƒÉng k√Ω th∆∞·ªùng
router.post("/register", async (req, res) => {
  try {
    let { full_name, email, password, role } = req.body;

    if (!email || !password || !full_name || !role) {
      return res.status(400).json({
        message: "Thi·∫øu th√¥ng tin ƒëƒÉng k√Ω (full_name, email, password, role)",
        status: "error",
      });
    }

    // Chu·∫©n h√≥a email (tr√°nh tr√πng vi·∫øt hoa/th∆∞·ªùng)
    email = email.toLowerCase().trim();

    // ‚úÖ Ki·ªÉm tra role h·ª£p l·ªá
    const validRoles = ["student", "instructor"];
    if (!validRoles.includes(role)) {
      return res.status(400).json({
        message: "Vai tr√≤ kh√¥ng h·ª£p l·ªá (ph·∫£i ch·ªçn student ho·∫∑c instructor)",
        status: "error",
      });
    }

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res
        .status(400)
        .json({ message: "Email ƒë√£ t·ªìn t·∫°i", status: "error" });
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);

    // T·∫°o user m·ªõi
    const newUser = await User.create({
      full_name,
      email,
      password_hash: hashedPassword,
      role,
      created_at: new Date(),
    });

    // Sinh JWT
    const token = generateToken(newUser);

    res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng",
      status: "success",
      token,
      user: {
        id: newUser.id,
        full_name: newUser.full_name,
        role: newUser.role,
      },
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", err);
    res.status(500).json({ message: "L·ªói server", status: "error" });
  }
});

// üîë ƒêƒÉng nh·∫≠p
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ where: { email } });

    if (!user) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n", status: "error" });
    }

    const isMatch = await bcrypt.compare(password, user.password_hash);
    if (!isMatch) {
      return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u", status: "error" });
    }

    const token = generateToken(user);
    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      status: "success",
      token,
      user: {
        id: user.id,
        full_name: user.full_name,
        role: user.role,
      },
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", err);
    res.status(500).json({ message: "L·ªói server", status: "error" });
  }
});

// üè´ X√°c minh m√£ ph√≤ng (Verify Room)
router.get("/verify-room/:code", (req, res) => {
  const { code } = req.params;

  // Gi·∫£ l·∫≠p: m√£ ph√≤ng "ABC123" l√† h·ª£p l·ªá
  if (code === "ABC123") {
    return res.json({ valid: true, roomId: "room_001" });
  } else {
    return res.json({ valid: false, message: "M√£ ph√≤ng kh√¥ng h·ª£p l·ªá" });
  }
});

module.exports = router;

const Exam = require("../models/ExamRoom");
const crypto = require("crypto");

async function createExam(req, res) {
  try {
    // üîí Ch·ªâ cho ph√©p gi·∫£ng vi√™n
    if (req.user.role !== "instructor") {
      return res.status(403).json({ message: "Ch·ªâ gi·∫£ng vi√™n m·ªõi c√≥ th·ªÉ t·∫°o b√†i thi" });
    }

    const { courseId, title, duration } = req.body;
    if (!courseId || !title || !duration) {
      return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ƒë·ªß th√¥ng tin: courseId, title, duration" });
    }

    // üé≤ Sinh m√£ ph√≤ng ng·∫´u nhi√™n
    const roomCode = crypto.randomBytes(4).toString("hex").toUpperCase();

    // üß© T·∫°o exam room m·ªõi
    const newExam = await Exam.create({
      course_id: courseId,
      title: title,
      duration: duration,
      exam_room_code: roomCode,
    });

    return res.status(201).json({
      message: "T·∫°o b√†i thi th√†nh c√¥ng",
      exam: newExam,
    });
  } catch (error) {
    console.error("‚ùå Create exam error:", error);
    return res.status(500).json({ message: "L·ªói server" });
  }
}

async function verifyExamCode(req, res) {
  try {
    const { roomCode } = req.body;
    if (!roomCode) {
      return res.status(400).json({ message: "C·∫ßn m√£ ph√≤ng thi" });
    }

    const exam = await Exam.findOne({ where: { exam_room_code: roomCode } });
    if (!exam) {
      return res.status(400).json({ message: "M√£ ph√≤ng thi kh√¥ng h·ª£p l·ªá" });
    }

    return res.status(200).json({
      valid: true,
      examId: exam.id,
      courseId: exam.course_id,
      title: exam.title,
    });
  } catch (error) {
    console.error("‚ùå Verify exam code error:", error);
    return res.status(500).json({ message: "L·ªói server" });
  }
}

module.exports = { createExam, verifyExamCode };
